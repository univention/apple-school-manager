#!/usr/share/ucs-test/runner python
## -*- coding: utf-8 -*-
## desc: test staff model/CSV generation
## tags: [apptest]
## exposure: dangerous
## packages:
##   - univention-oneroster-lib
## bugs: [47622]

import sys
from ucsschool.lib.models import Teacher, TeachersAndStaff
import univention.testing.strings as uts
import univention.testing.utils as utils
from univention.config_registry import handler_set
from univention.oneroster.models.staff import OneRosterStaff
sys.path.append('/usr/share/ucs-test/90_ucsschool/')
from essential.importusers_cli_v2 import ImportTestbase


class Test(ImportTestbase):
	ou_C = None

	def test(self):
		subdomain = uts.random_name()
		handler_set(['oneroster/attributes/user/email/prepend_domain={}'.format(subdomain)])

		school1 = self.ou_A.name
		school2 = self.ou_B.name

		teacher1_name, teacher1_dn = self.schoolenv.create_teacher(school1)
		email_local = uts.random_name()
		email = '{}@{}'.format(email_local, self.maildomain)
		email_sub = '{}@{}.{}'.format(email_local, subdomain, self.maildomain)
		teacher2_name, teacher2_dn = self.schoolenv.create_teacher_and_staff(
			school2, schools=[school1, school2], mailaddress=email)
		self.log.info('Created teacher1: %r (%s)', teacher1_name, teacher1_dn)
		self.log.info('Created teacher2: %r (%s)', teacher2_name, teacher2_dn)

		# check if this system has a schema that supports a middle name
		teacher1 = Teacher.from_dn(teacher1_dn, None, self.lo)
		teacher_udm_obj = teacher1.get_udm_object(self.lo)
		for attr in ('middleName', 'initials', 'oxMiddleName'):
			if attr in teacher_udm_obj:
				middle_name = uts.random_name()
				self.log.info('*** Adding middle name to teacher1: %r...', middle_name)
				teacher_udm_obj[attr] = middle_name
				teacher_udm_obj.modify()
				utils.verify_ldap_object(teacher1_dn, {'attr': [middle_name]})
				# reload object just to be safe
				teacher1 = Teacher.from_dn(teacher1_dn, None, self.lo)
				break
		else:
			self.log.info('*** No LDAP schema for middle name attribute found.')
			middle_name = ''

		teacher2 = TeachersAndStaff.from_dn(teacher2_dn, None, self.lo)

		or_teacher1 = OneRosterStaff.from_dn(teacher1_dn)
		got_teacher1 = or_teacher1.as_csv_line()
		expected_teacher1 = [
			teacher1_name, '', teacher1.firstname, middle_name, teacher1.lastname, '', teacher1_name, school1
		]
		if got_teacher1 == expected_teacher1:
			self.log.info('OK: teacher1 CSV line is as expected.')
		else:
			self.fail('Expected CSV line for teacher1: {!r}, got: {!r}.'.format(expected_teacher1, got_teacher1))

		or_teacher2 = OneRosterStaff.from_dn(teacher2_dn)
		got_teacher2 = or_teacher2.as_csv_line()
		expected_teacher2 = [
			teacher2_name, '', teacher2.firstname, '', teacher2.lastname, email_sub, teacher2_name, school2, school1
		]
		if got_teacher2 == expected_teacher2:
			self.log.info('OK: teacher2 CSV line is as expected.')
		else:
			self.fail('Expected CSV line for teacher2: {!r}, got: {!r}.'.format(expected_teacher2, got_teacher2))


if __name__ == '__main__':
	Test().run()
